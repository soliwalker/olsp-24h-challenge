import fs from 'fs/promises';
import path from 'path';

const rootDir = './';
const distDir = 'dist';
const workerFile = 'src/index.js';
const baseUrl = 'https://jointhesprint.co'; // You should confirm this

async function build() {
  console.log('Starting build process...');

  try {
    // 1. Clean and create dist directory
    await fs.rm(distDir, { recursive: true, force: true });
    await fs.mkdir(distDir);
    console.log(`Cleaned and created '${distDir}' directory.`);

    // 2. Find all processable files in the root
    const files = await fs.readdir(rootDir);
    const processableFiles = files.filter(file => file.endsWith('.html') || file.endsWith('.pdf'));

    if (processableFiles.length === 0) {
      console.log('No processable files found. Aborting.');
      return;
    }
    console.log(`Found ${processableFiles.length} files to process.`);

    // 3. Process each file
    for (const file of processableFiles) {
      const sourcePath = path.join(rootDir, file);
      const destPath = path.join(distDir, file);

      if (file.endsWith('.pdf')) {
        await fs.copyFile(sourcePath, destPath);
        console.log(`Copied PDF file: ${file}`);
        continue; // Skip to next file
      }

      // Process HTML files
      let content = await fs.readFile(sourcePath, 'utf-8');

      const defaultTitle = 'ðŸš€ Join The Sprint!';
      const defaultDescription = 'ðŸ”¥ Your 24-hour challenge for online success! ðŸ’°';

      const titleMatch = content.match(/<title>(.*?)<\/title>/);
      const descriptionMatch = content.match(/<meta name="description" content="(.*?)">/);

      let title = titleMatch ? titleMatch[1] : defaultTitle;
      let description = descriptionMatch ? descriptionMatch[1] : defaultDescription;

      if (file === 'index.html') {
        // Update the cheat sheet link to be local
        content = content.replace(
          /const CHEAT_SHEET_PDF_LINK = ".*";/,
          `const CHEAT_SHEET_PDF_LINK = "/cheat-sheet.pdf";`
        );

        const pageTitleForShare = titleMatch ? titleMatch[1] : 'the 24-Hour Challenge';
        const newShareText = `Just accepted the FREE '${pageTitleForShare}'. Who wants to join me and see if it's real? ðŸ’ª #24HourChallenge`;
        content = content.replace(
          /const SHARE_TEXT = ".*";/,
          `const SHARE_TEXT = "${newShareText}";`
        );
      }

      if (!/\p{Emoji}/u.test(title)) title = `ðŸš€ ${title}`;
      if (!/\p{Emoji}/u.test(description)) description = `ðŸ”¥ ${description} ðŸ’°`;

      const pageUrl = `${baseUrl}/${file.replace('.html', '')}`;
      const imageTextLine1 = title.length > 30 ? title.substring(0, title.lastIndexOf(' ', 30)) : title;
      const imageTextLine2 = title.length > 30 ? title.substring(title.lastIndexOf(' ', 30) + 1) : 'Click to Discover!';
      const encodedImageText = encodeURIComponent(`${imageTextLine1}\n${imageTextLine2}`);
      const imageUrl = `https://placehold.co/1200x630/000000/FFFFFF/png?text=${encodedImageText}&font=Anton`;

      const ogTags = `
        <!-- Open Graph Tags (auto-generated) -->
        <meta property="og:title" content="${title}" />
        <meta property="og:description" content="${description}" />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="${pageUrl}" />
        <meta property="og:image" content="${imageUrl}" />
        <meta name="twitter:card" content="summary_large_image">
        <!-- End Open Graph Tags -->
      `;

      const newContent = content.replace(/<\/head>/, `${ogTags}\n</head>`);
      await fs.writeFile(destPath, newContent);
    }
    console.log('Successfully processed and injected OG tags into HTML files.');

    // 4. Generate the worker file (index.js)
    const workerCode = `
// This file is auto-generated by build.mjs. Do not edit manually.

export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    let path = url.pathname;

    // --- Path rewriting logic ---
    if (path === "/") {
      path = "/index.html";
    } else if (!path.split('/').pop().includes('.')) {
      path = path + ".html";
    }
    
    const newUrl = new URL(path, request.url);
    const newRequest = new Request(newUrl, request);

    // --- Custom PDF download logic ---
    if (path === '/cheat-sheet.pdf') {
      // Fetch the asset from the store
      const asset = await env.ASSETS.fetch(newRequest);

      // Create a new response with the same body but new headers to force download
      const headers = new Headers(asset.headers);
      headers.set('Content-Disposition', 'attachment; filename="24-Hour-Commission-Cheat-Sheet.pdf"');
      
      return new Response(asset.body, {
        status: asset.status,
        statusText: asset.statusText,
        headers: headers,
      });
    }

    // For all other files, let the default asset handler serve them
    return env.ASSETS.fetch(newRequest);
  },
};
`;

    await fs.writeFile(workerFile, workerCode.trim());
    console.log(`Successfully generated worker file '${workerFile}'.`);

  } catch (error) {
    console.error('FATAL: Build process failed:', error);
    process.exit(1);
  }
}

build();