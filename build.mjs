
import fs from 'fs/promises';
import path from 'path';

const root = './';
const sourceDir = 'src';
const workerFile = path.join(sourceDir, 'index.js');

async function buildWorker() {
  console.log('Starting build...');

  try {
    const files = await fs.readdir(root);
    const htmlFiles = files.filter(file => file.endsWith('.html'));

    if (htmlFiles.length === 0) {
      console.log('No HTML files found. Skipping build.');
      return;
    }

    console.log(`Found ${htmlFiles.length} HTML files:`, htmlFiles);

    const imports = htmlFiles.map(file => {
      const name = file.replace('.html', 'Html');
      return `import ${name} from './../${file}';`;
    }).join('\n');

    const pages = htmlFiles.map(file => {
      const name = file.replace('.html', 'Html');
      const route = `/${file.replace('.html', '')}`;
      
      if (route === '/index') {
        return `  '/' : ${name},
  '${route}': ${name},`;
      }
      return `  '${route}': ${name},`;
    }).join('\n');

    const workerCode = `
// This file is auto-generated by build.mjs. Do not edit manually.

${imports}

const pages = {
${pages}
};

export default {
  async fetch(request) {
    const url = new URL(request.url);
    let path = url.pathname;

    // remove .html extension
    if (path.endsWith('.html')) {
      path = path.slice(0, -5);
    }
    
    // handle root path
    if (path === '/') {
        path = '/index';
    }

    const html = pages[path];

    if (html) {
      return new Response(html, {
        headers: { 'Content-Type': 'text/html' },
      });
    }

    // Serve index.html for root, otherwise 404
    if (path === '/index') {
        return new Response(pages['/index'], {
            headers: { 'Content-Type': 'text/html' },
        });
    }

    return new Response('Not Found', { status: 404 });
  },
};
`;

    await fs.writeFile(workerFile, workerCode.trim());
    console.log(`Successfully generated ${workerFile}`);

  } catch (error) {
    console.error('Error during build process:', error);
    process.exit(1);
  }
}

buildWorker();
