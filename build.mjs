import fs from 'fs/promises';
import path from 'path';

const rootDir = './';
const distDir = 'dist';
const workerFile = 'src/index.js';
const baseUrl = 'https://jointhesprint.co'; // You should confirm this

async function build() {
  console.log('Starting build process...');

  try {
    // 1. Clean and create dist directory
    await fs.rm(distDir, { recursive: true, force: true });
    await fs.mkdir(distDir);
    console.log(`Cleaned and created '${distDir}' directory.`);

    // 2. Find all HTML files in the root
    const files = await fs.readdir(rootDir);
    const htmlFiles = files.filter(file => file.endsWith('.html'));

    if (htmlFiles.length === 0) {
      console.log('No HTML files found. Aborting.');
      return;
    }
    console.log(`Found ${htmlFiles.length} HTML files to process.`);

    // 3. Process each HTML file
    for (const file of htmlFiles) {
      const sourcePath = path.join(rootDir, file);
      const content = await fs.readFile(sourcePath, 'utf-8');

      const defaultTitle = 'Join The Sprint';
      const defaultDescription = 'La tua sfida di 24 ore per il successo online!';

      // Extract title and description
      const titleMatch = content.match(/<title>(.*?)<\/title>/);
      const title = titleMatch ? titleMatch[1] : defaultTitle;

      const descriptionMatch = content.match(/<meta name="description" content="(.*?)">/);
      const description = descriptionMatch ? descriptionMatch[1] : defaultDescription;

      // Generate OG tags
      const pageUrl = `${baseUrl}/${file.replace('.html', '')}`;
      const imageUrl = `https://placehold.co/1200x630/000000/FFFFFF/png?text=${encodeURIComponent(title)}`;

      const ogTags = `
        <!-- Open Graph Tags (auto-generated) -->
        <meta property="og:title" content="${title}" />
        <meta property="og:description" content="${description}" />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="${pageUrl}" />
        <meta property="og:image" content="${imageUrl}" />
        <meta name="twitter:card" content="summary_large_image">
        <!-- End Open Graph Tags -->
      `;

      // Inject OG tags before </head>
      const newContent = content.replace(/<\/head>/, `${ogTags}\n</head>`);
      
      const destPath = path.join(distDir, file);
      await fs.writeFile(destPath, newContent);
    }
    console.log('Successfully processed and injected OG tags into HTML files.');

    // 4. Generate the worker file (index.js)
    const imports = htmlFiles.map(file => {
      const name = file.replace('.html', 'Html');
      return `import ${name} from './../dist/${file}';`;
    }).join('\n');

    const pages = htmlFiles.map(file => {
      const name = file.replace('.html', 'Html');
      const route = `/${file.replace('.html', '')}`;
      
      if (route === '/index') {
        return `  '/' : ${name},
  '${route}': ${name}`;
      }
      return `  '${route}': ${name}`;
    }).join(',\n');

    const workerCode = `
// This file is auto-generated by build.mjs. Do not edit manually.

${imports}

const pages = {
${pages}
};

export default {
  async fetch(request) {
    const url = new URL(request.url);
    let path = url.pathname;

    if (path.endsWith('.html')) {
      path = path.slice(0, -5);
    }
    if (path === '/') {
      path = '/index';
    }

    const html = pages[path];

    if (html) {
      return new Response(html, { headers: { 'Content-Type': 'text/html' } });
    }

    return new Response('Not Found', { status: 404 });
  },
};
`;

    await fs.writeFile(workerFile, workerCode.trim());
    console.log(`Successfully generated worker file '${workerFile}'.`);

  } catch (error) {
    console.error('FATAL: Build process failed:', error);
    process.exit(1);
  }
}

build();